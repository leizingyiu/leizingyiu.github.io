<?xml version="1.0" standalone="no"?>
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
  viewBox="0 0 360 360" style="enable-background: new 0 0 360 360" xml:space="preserve" class=''>
  <style>
    .hue {mix-blend-mode: hue;}
    .blur {filter: url(#blur);}
  </style>

  <filter id="blur">
    <feGaussianBlur in="SourceGraphic" stdDeviation="12" result="blur" />
  </filter>

  <!-- <path d="M 0 0 
   L 120 0 
   Q 180 0 95 80 
   T 180 280 
   Q 290 360 180 360 
   L 120 360 
   L 0 360 
   Z" stroke="none" fill="white">
  </path>

  <path d="M 360 0 
     L 320 0 
     Q 180 0 195 100 
     Q 205 200 240 260 
     Q 275 320 180 360 
     L 320 360 
     L 360 360 
     Z" stroke="none" fill="white">
  </path> -->

  <script type="text/javascript">
          let logDebug = location.href.indexOf('leizingyiu.net') == -1;
        console.log = logDebug?console.log:()=>void 0;


    function vAdd() {
      let arg = [...arguments];
      if (arg.length > 2) {
        let v = arg.pop();
        let V = vAdd(...arg);
        return [V[0] + v[0], V[1] + v[1]];
      } else {
        return [arg[0][0] + arg[1][0], arg[0][1] + arg[1][1]];
      }
    }

    function drawRanPath(l, t, r, b, fillColor, classList) {
      console.log('drawRanPath by leizingyiu \n visit leizingyiu.net');
      var vLeft = l;
      var vTop = t;
      var vRight = r;
      var vBottom = b;

      var m = [vLeft, vTop];
      var l1 = [vLeft + (vRight - vLeft) * Math.random() / 2, vTop];
      var q = [];
      var points = [m, l1];
      //console.log(points.join('\n'));

      var a, b;
      var len = 4;
      var k = 1;
      var ranOffset = 0.5;
      var ranArr = [...new Array(len)].map((i, idx) => Math.random() * k * 1 / len / 2 + (idx + ranOffset) / len);

      var pointOffset = 0.6;
      q[0] = [l1[0] + Math.random() * (vRight - l1[0]) * pointOffset, vTop];
      points[points.length] = q[0];
      q[1] = [q[q.length - 1][0] + Math.random() * vRight * pointOffset, ranArr.shift() * vBottom];
      points[points.length] = q[1];
      //console.log(points.join('\n'));

      for (let i = len - 1; i > 0; i--) {
        let rd = Math.random() / 2;
        a = points[points.length - 2];
        b = points[points.length - 1];
        points[points.length] = q[q.length] = vAdd(vAdd(b, a.map(v => v * -1)).map(v => v * rd), b);
        points[points.length] = q[q.length] = [Math.abs(vRight - vLeft) / 2 + (vRight - vLeft) / 2 * pointOffset * Math
          .random(), vBottom * ranArr.shift()
        ];
      }
      //console.log(points.join('\n'));
      a = points[points.length - 2];
      b = points[points.length - 1];
      q[q.length] = [(b[0] - a[0]) * (vBottom - b[1]) / (b[1] - a[1]) + b[0], vBottom];
      q[q.length] = [(vRight - vLeft) * Math.random(), vBottom];
      var l2 = [vLeft, vBottom];
      var d = ('M ' + m.join(' ') + " L " + l1.join(' ') + q.map((v, i) => i % 2 != 1 ? ' Q ' + [v.join(' '), q[i + 1].join(' ')].join(' ') : '').join(' ') + ' L ' + l2.join(' ') + ' Z');

      var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      path.setAttribute('d', d);
      classList.map(c => path.classList.add(c));

      path.setAttribute('fill', fillColor);
      path.setAttribute('stroke', 'transparent');
      path.setAttribute('stroke-width', '2')
      document.getElementsByTagName('svg')[0].appendChild(path);
    }

    drawRanPath(360, 0, 160, 360, 'rgba(255,255,255,0.5)', []);
    drawRanPath(0, 0, 120, 360, 'rgba(255,255,255,0.5)', []);

    drawRanPath(-100, -100, 360, 360, 'hsla(' + Math.floor((Math.random()*24)) * 360/24 + ',100%,80%,0.2)', []);
    drawRanPath(360, -100, -100, 360, 'hsla(' + Math.floor((Math.random()*24)) * 360/24  + ',100%,80%,0.2)', []);

    drawRanPath(-10, -10, 360, 360, 'hsla(' + Math.floor((Math.random()*9)) * 360/9 +Math.random()*15  + ',100%,50%,1)', ['hue']);
    drawRanPath(360, -10, -10, 360, 'hsla(' + Math.floor((Math.random()*9)) * 360/9 +Math.random()*15  * 360 + ',100%,50%,1)', ['hue']);



  </script>

</svg>